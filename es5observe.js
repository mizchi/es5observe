// Generated by CoffeeScript 1.4.0
(function() {
  var define, es5observe, es5unobserve, prefix, update;

  prefix = '__';

  update = function(obj, key, nextVal) {
    var e, event_type, f, oldValue, _i, _len, _ref, _results;
    oldValue = obj._last_[key];
    if (nextVal !== oldValue) {
      obj._last_[key] = nextVal;
      event_type = oldValue === void 0 ? 'new' : nextVal === void 0 ? 'deleted' : 'updated';
      e = {
        type: event_type,
        name: key,
        object: obj,
        oldValue: oldValue
      };
      _ref = obj._notice_;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        _results.push(f(e));
      }
      return _results;
    }
  };

  define = function(obj, key) {
    return Object.defineProperty(obj, key, {
      get: function() {
        return this[prefix + key];
      },
      set: function(val) {
        this[prefix + key] = val;
        return update(obj, key, val);
      }
    });
  };

  es5observe = function(obj, f) {
    var key, real_key, val, _ref;
    if (obj._observe_) {
      obj._notice_.push(f);
      return obj;
    }
    Object.defineProperties(obj, {
      '_observe_': {
        value: true,
        enumerable: false
      },
      '_last_': {
        value: {},
        enumerable: false
      },
      '_notice_': {
        value: [f],
        enumerable: false
      }
    });
    for (key in obj) {
      val = obj[key];
      if (((_ref = typeof val) === 'number' || _ref === 'string') && key.indexOf(prefix) === -1) {
        real_key = prefix + key;
        obj[real_key] = obj._last_[real_key] = val;
        define(obj, key);
      }
    }
    return obj;
  };

  es5unobserve = function(obj, f) {
    return delete obj._notice_[obj._notice_.indexOf(f)];
  };

  if (!Object.observe) {
    Object.defineProperties(Object, {
      observe: {
        value: es5observe,
        enumerable: false
      },
      unobserve: {
        value: es5unobserve,
        enumerable: false
      }
    });
  }

}).call(this);
